name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform == 'macos-latest' && 'x86_64-apple-darwin' || 'x86_64-pc-windows-msvc' }}

      - name: Build project
        run: cargo build --release

      - name: Package application
        run: |
          if [ ${{ matrix.platform }} == 'macos-latest' ]; then
            cargo packager --release --target x86_64-apple-darwin
          else
            cargo packager --release --target x86_64-pc-windows-msvc
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform == 'macos-latest' && 'app.dmg' || 'app.exe' }}
          path: target/release/${{ matrix.platform == 'macos-latest' && 'app.dmg' || 'app.exe' }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/${{ matrix.platform == 'macos-latest' && 'app.dmg' || 'app.exe' }}
          asset_name: ${{ matrix.platform == 'macos-latest' && 'app.dmg' || 'app.exe' }}
          asset_content_type: application/octet-stream
